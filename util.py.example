import openai
import os
import platform
import subprocess
import random
import requests
import pygame
import threading
from io import BytesIO
from dotenv import load_dotenv

# This is an alternative util.py file that can be used to integrate neco-arc-GPT with playHT to make her respond in a custom voice.
# To use it, backup the original util.py file and replace it with this one (rename to util.py).
# The free plan gives you 12,500 characters and one instant voice clone.

# For this to work, you'll need to create an account on playHT and create a custom voice using voice cloning.
# Then you'll need to get your user ID and secret key and paste them into the AUTHORIZATION and X-USER-ID fields in the code below.
# Lastly, you'll need to get the ID of your custom voice (for example s3://voice-cloning-zero-shot/c657eba0-82.../neco-arc/manifest.json)
# and paste it into the 'voice' field. The easiest way I've found to get this ID is through the API documentation page here:
# https://docs.play.ht/reference/api-list-cloned-voices

# Please note that it won't work if you run the program using the .exe file.


def normalize(list):
    mag = sum(list)
    return [v / mag for v in list]


def make_cum(list):
    acc = 0
    for i in range(len(list)):
        temp = list[i]
        list[i] = acc
        acc += temp
    return list


class WeightedRandomMap:
    def __init__(self, list):
        self.names = [obj["name"] for obj in list]
        self.P = make_cum(normalize([obj["probability"] for obj in list]))
        assert len(self.names) == len(self.P)

    def get_rand(self):
        val = random.random()
        for i, p in enumerate(self.P):
            if p > val:
                return self.names[i - 1]
        return self.names[-1]


def openai_query(message):
    load_dotenv()
    openai.api_key = os.getenv("OPENAI_API_KEY")
    try:
        response = openai.Completion.create(model="text-davinci-003", prompt=message, temperature=.95, max_tokens=2500)
        return response["choices"][0]["text"]
    except Exception:
        message = "Open AI is not reachable nyaa! You might need to store your API key as an environment variable nyaa."
        return message


def speak(message, callback):
        url = "https://play.ht/api/v2/tts/stream"

        payload = {
            "text": message,

            # copy and paste your voice's ID below
            "voice": "<your voice here>",

            "quality": "draft",
            "output_format": "mp3",
            "speed": .75,
            "sample_rate": 24000
        }
        headers = {
            "accept": "audio/mpeg",
            "content-type": "application/json",

            # copy and paste your secret key below
            "AUTHORIZATION": "<your secret key here>",

            # copy and paste your user ID below
            "X-USER-ID": "<your user ID here>"
        }

        respond = requests.post(url, json=payload, headers=headers)

        if respond.status_code == 200:
            audio_content = BytesIO(respond.content)
            
            def f():
                pygame.mixer.init()
                pygame.mixer.music.load(audio_content)
                pygame.mixer.music.set_volume(0.5)
                pygame.mixer.music.play()

                while pygame.mixer.music.get_busy():
                    pygame.time.Clock().tick(10)
                
                callback()

            threading.Thread(target=f).start()

        else:
            print("Error:", respond.status_code)
